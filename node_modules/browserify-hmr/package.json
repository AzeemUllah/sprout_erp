{
  "_args": [
    [
      {
        "raw": "browserify-hmr@^0.3.1",
        "scope": null,
        "escapedName": "browserify-hmr",
        "name": "browserify-hmr",
        "rawSpec": "^0.3.1",
        "spec": ">=0.3.1 <0.4.0",
        "type": "range"
      },
      "C:\\Users\\Developer\\Desktop\\sprout\\sprout_erp-master\\sprout_erp-master"
    ]
  ],
  "_from": "browserify-hmr@>=0.3.1 <0.4.0",
  "_id": "browserify-hmr@0.3.5",
  "_inCache": true,
  "_location": "/browserify-hmr",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/browserify-hmr-0.3.5.tgz_1474064993970_0.226791882654652"
  },
  "_npmUser": {
    "name": "agentme",
    "email": "agentme49@gmail.com"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "browserify-hmr@^0.3.1",
    "scope": null,
    "escapedName": "browserify-hmr",
    "name": "browserify-hmr",
    "rawSpec": "^0.3.1",
    "spec": ">=0.3.1 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/browserify-hmr/-/browserify-hmr-0.3.5.tgz",
  "_shasum": "f69961cc1d983aae08ef7e249d782c094a326b69",
  "_shrinkwrap": null,
  "_spec": "browserify-hmr@^0.3.1",
  "_where": "C:\\Users\\Developer\\Desktop\\sprout\\sprout_erp-master\\sprout_erp-master",
  "author": {
    "name": "Chris Cowan",
    "email": "agentme49@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/AgentME/browserify-hmr/issues"
  },
  "dependencies": {
    "convert-source-map": "^1.1.1",
    "express": "^4.13.3",
    "lodash": "^4.0.0",
    "rsvp": "^3.0.21",
    "socket.io": "^1.3.7",
    "socket.io-client": "^1.3.7",
    "source-map": "^0.5.1",
    "synchd": "^1.0.0",
    "through2": "^2.0.0"
  },
  "description": "Hot Module Replacement plugin for Browserify",
  "devDependencies": {
    "babel-polyfill": "^6.3.14",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-stage-3": "^6.3.13",
    "babel-register": "^6.4.3",
    "browserify": "^13.0.0",
    "co": "^4.6.0",
    "fs-extra": "^0.30.0",
    "mocha": "^3.0.2",
    "rimraf": "^2.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f69961cc1d983aae08ef7e249d782c094a326b69",
    "tarball": "https://registry.npmjs.org/browserify-hmr/-/browserify-hmr-0.3.5.tgz"
  },
  "gitHead": "4aea6f964785d8b39a544957d4fea4af43f6b23c",
  "homepage": "https://github.com/AgentME/browserify-hmr#readme",
  "keywords": [
    "browserify",
    "browserify-plugin",
    "hmr",
    "reload",
    "hot",
    "edit",
    "live",
    "livereload"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "agentme",
      "email": "agentme49@gmail.com"
    }
  ],
  "name": "browserify-hmr",
  "optionalDependencies": {},
  "readme": "# Browserify-HMR\n\nThis an implementation of Webpack's [Hot Module Replacement\nAPI](https://webpack.github.io/docs/hot-module-replacement.html) as a plugin for\nBrowserify. This project seems to work in many cases, but it is still early in\ndevelopment and likely has some bugs at the moment. Let me know how it works\nfor you!\n\n## Quick Example\n\n```sh\ngit clone https://github.com/AgentME/browserify-hmr.git\ncd browserify-hmr/example\nnpm i && npm start\n```\n\nOpen [http://localhost:8080/](http://localhost:8080/) and try updating\n`label.jsx` and `interval.js`.\n\n## Hot Module Replacement Usage\n\nHot module replacement works by re-executing updated modules. The [Hot Module\nReplacement API](https://webpack.github.io/docs/hot-module-replacement.html)\nmust be used to define which modules can accept updates, and what to do when a\nmodule is going to be updated.\n\nHowever, using the HMR API directly in application code is not always the best\nroute. Code transforms and libraries like\n[react-transform-hmr](https://github.com/gaearon/react-transform-hmr) and\n[ud](https://github.com/AgentME/ud) can help do common tasks or entirely\nautomate making certain types of code be hot replaceable.\n\nIn addition to the `module.hot.*` functions from the Webpack Hot Module\nReplacement API, the following is also implemented:\n\n### module.hot.setUpdateMode(mode, options)\n\nThis allows the bundle update mode and options to be changed at runtime. `mode`\nshould be a string and has the same meaning as `mode` in the Plugin Options\nsection. `options` is an optional object which may have the properties `url`,\n`cacheBust`, and `ignoreUnaccepted`, also with the same meanings as the same\noptions in the Plugin Options section. The HMR status must be \"idle\" when this\nis called.\n\n## Plugin Usage\n\nAdd the browserify-hmr plugin to your watchify call:\n\n```sh\nnpm i browserify-hmr\nwatchify -p browserify-hmr index.js -o bundle.js\n```\n\nBrowserify-HMR works with Node too! Use the m/mode option to tell it to use the\n\"fs\" method to update itself. See more information below in the Options\nsection.\n\n```sh\nwatchify --node -p [ browserify-hmr -m fs ] index.js -o bundle.js\n```\n\nWatchify is not required. Browserify can be run multiple times manually instead\nif more control over the timing of the reloads is desired.\n\n    browserify -p [ browserify-hmr -m ajax -u /bundle.js ] index.js -o bundle.js\n    nano foo.js # make some edits\n    nano bar.js # edit some more files\n    browserify -p [ browserify-hmr -m ajax -u /bundle.js ] index.js -o bundle.js\n\n## Plugin Options\n\nBrowserify-HMR options can be specified from the command line following the plugin name with braces in long or short form:\n\n```sh\nwatchify -p [ browserify-hmr -m fs ] index.js -o bundle.js\n```\n\nOptions can be specified using the Browserify API too:\n\n```javascript\nvar hmr = require('browserify-hmr');\n\nbrowserify().plugin(hmr, {\n  mode: \"fs\"\n})\n```\n\n`m, mode` is a string which sets the update mode. \"websocket\" tells\nthe bundle to open a connection to a websocket server hosted by the plugin to\nlisten for changes. The websocket will be served over HTTP unless any of the\ntlskey, tlscert, or tlsoptions options are passed. \"ajax\" uses AJAX requests to\ndownload updates. \"fs\" uses the filesystem module and is suitable for Node use.\n\"none\" causes the bundle to not be configured to check for updates.\n`module.hot.setUpdateMode` may be called at runtime to reconfigure the bundle.\nDefaults to \"websocket\".\n\n`supportModes` is an optional array of strings specifying other update modes\nto build support for into the bundle in addition to the given `mode`. This must\nbe used if the bundle is going to change the update mode by using\n`module.hot.setUpdateMode` at runtime to a mode not given in the `mode` option.\nYou can pass this option on the command like this:\n\n    watchify -p [ browserify-hmr -m none --supportModes [ ajax websocket ] ] index.js -o bundle.js\n\n`noServe` is a boolean which allows Browserify-HMR's automatic websocket server\nto be disabled. Normally, the Browserify-HMR plugin automatically hosts a\nwebsocket server if `mode` or `supportModes` contains \"websocket\". If this is\nset to true, then the plugin will never host its own websocket server. You\ncould use this if you're building a bundle in websocket mode with the `url`\noption set to point to a websocket server hosted by another instance of\nBrowserify-HMR. Defaults to false.\n\n`ignoreUnaccepted` is a boolean which controls the value of the\n`ignoreUnaccepted` parameter to `module.hot.apply` for the \"websocket\" mode.\n(When the \"websocket\" mode is used, Browserify-HMR automatically checks for\nupdates and applies them, so the application never gets a chance to call\n`module.hot.apply` itself.) Defaults to true.\n\n`u, url` is a string which sets the update URL that the websocket connection or\nBrowserify bundle is accessible at. In \"websocket\" mode, this defaults to\n\"http://localhost:3123\". This is required for the \"ajax\" mode. This is not\nrequired for \"fs\" mode.\n\n`p, port` is a number that sets the port to listen on if \"websocket\" mode is\nused. If you change this, you'll most likely want to change the `url` setting\ntoo. Defaults to 3123.\n\n`h, hostname` is the hostname to listen on if \"websocket\" mode is used. This\ndefaults to \"localhost\".\n\n`b, cacheBust` is a boolean which controls whether cache busting should be used\nfor AJAX requests. This only has an effect if the update mode is set to \"ajax\".\nIf true, then a random parameter is appended to the URL on every request. This\nallows the cache to be bypassed when the server does not give a low Expires or\nCache-Control header value. Note that this prevents E-Tag and Last-Modified\nheaders from being used by the client, so keeping this disabled if it's not\nneeded can be better for performance. You should consider tuning the HTTP\nheaders your script is served with before tweaking this. Defaults to false.\n\n`k, key` is the bundle key. If multiple bundles built using Browserify-HMR are\nrun within the same javascript environment, then each must have a unique bundle\nkey. The bundle key defaults to a value created by combining the update mode\nand update url, so you generally don't need to worry about this option.\n\n`K, tlskey` is the path to the key file to use for HTTPS mode.\n\n`C, tlscert` is the path to the certificate file to use for HTTPS mode.\n\n`tlsoptions` is an object of options to pass to the call to\n`https.createServer`. Note that this object must be JSONifiable, so use strings\ninstead of any buffers inside of it. This option may not be given by the\ncommand line.\n\nIf you don't use the default websocket update mode, then you'll need to\nmanually tell browserify-hmr when it should check for and apply updates. You\ncan use code like the following somewhere in your project to poll for updates:\n\n```javascript\nif (module.hot) {\n  var doCheck = function() {\n    module.hot.check(function(err, outdated) {\n      if (err) {\n        console.error('Check error', err);\n      }\n      if (outdated) {\n        module.hot.apply(function(err, updated) {\n          if (err) {\n            console.error('Update error', err);\n          } else {\n            console.log('Replaced modules', updated);\n          }\n          setTimeout(doCheck, 2000);\n        });\n      } else {\n        setTimeout(doCheck, 2000);\n      }\n    });\n  };\n  doCheck();\n}\n```\n\n## See Also\n\n* [react-hot-transform](https://github.com/AgentME/react-hot-transform)\n  automatically makes React code live-updatable.\n* [ud](https://github.com/AgentME/ud) and\n  [ud-kefir](https://github.com/AgentME/ud-kefir) are small simple utilities\n  for declaring data and code as live-updatable.\n\n## Planned Work\n\n* There are known bugs currently where changes to modules without update\n  accepters can cause the updates to bubble up to the entry and cause many\n  modules to be reloaded incorrectly.\n* The client code is a bit of a mess. It should be refactored and have many\n  smaller unit tests made.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AgentME/browserify-hmr.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.3.5"
}
