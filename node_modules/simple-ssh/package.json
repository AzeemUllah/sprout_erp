{
  "_args": [
    [
      {
        "raw": "simple-ssh@^0.9.0",
        "scope": null,
        "escapedName": "simple-ssh",
        "name": "simple-ssh",
        "rawSpec": "^0.9.0",
        "spec": ">=0.9.0 <0.10.0",
        "type": "range"
      },
      "C:\\Users\\Developer\\Desktop\\sprout\\sprout_erp-master\\sprout_erp-master"
    ]
  ],
  "_from": "simple-ssh@>=0.9.0 <0.10.0",
  "_id": "simple-ssh@0.9.0",
  "_inCache": true,
  "_location": "/simple-ssh",
  "_nodeVersion": "5.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/simple-ssh-0.9.0.tgz_1461854992480_0.6781000075861812"
  },
  "_npmUser": {
    "name": "mcluck",
    "email": "mcluck90@gmail.com"
  },
  "_npmVersion": "3.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "simple-ssh@^0.9.0",
    "scope": null,
    "escapedName": "simple-ssh",
    "name": "simple-ssh",
    "rawSpec": "^0.9.0",
    "spec": ">=0.9.0 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/simple-ssh/-/simple-ssh-0.9.0.tgz",
  "_shasum": "e2df011d6df50d13cbfea5243a36b23250dcedb2",
  "_shrinkwrap": null,
  "_spec": "simple-ssh@^0.9.0",
  "_where": "C:\\Users\\Developer\\Desktop\\sprout\\sprout_erp-master\\sprout_erp-master",
  "author": {
    "name": "Mike Cluck",
    "email": "mcluck90@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/MCluck90/simple-ssh/issues"
  },
  "dependencies": {
    "ssh2": "^0.5.0",
    "xtend": "^4.0.1"
  },
  "description": "A wrapper for ssh2 to make it easier to perform commands over SSH",
  "devDependencies": {
    "expect.js": "~0.2.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.4.4",
    "grunt-simple-mocha": "~0.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "e2df011d6df50d13cbfea5243a36b23250dcedb2",
    "tarball": "https://registry.npmjs.org/simple-ssh/-/simple-ssh-0.9.0.tgz"
  },
  "gitHead": "ac0fae319b2b727cd9c9c4891f647b67d8f36bcc",
  "homepage": "https://github.com/MCluck90/simple-ssh#readme",
  "keywords": [
    "ssh",
    "ssh2"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/MCluck90/simple-ssh/blob/master/LICENSE.txt"
    }
  ],
  "main": "./lib/ssh.js",
  "maintainers": [
    {
      "name": "mcluck",
      "email": "mcluck90@gmail.com"
    }
  ],
  "name": "simple-ssh",
  "optionalDependencies": {},
  "readme": "# simple-ssh\r\n\r\nA wrapper for the [ssh2 client module by Brian White][1] which makes it easier to run a sequence of commands over SSH.\r\n\r\n# Requirements\r\n\r\n* [node.js][2] -- v0.8.7 or newer\r\n\r\n# Install\r\n\r\n    npm install simple-ssh\r\n\r\n# Examples\r\n\r\n* Echoing out a users `PATH`:\r\n\r\n```javascript\r\nvar SSH = require('simple-ssh');\r\n\r\nvar ssh = new SSH({\r\n    host: 'localhost',\r\n    user: 'username',\r\n    pass: 'password'\r\n});\r\n\r\nssh.exec('echo $PATH', {\r\n    out: function(stdout) {\r\n        console.log(stdout);\r\n    }\r\n}).start();\r\n\r\n/*** Using the `args` options instead ***/\r\nssh.exec('echo', {\r\n    args: ['$PATH'],\r\n    out: function(stdout) {\r\n        console.log(stdout);\r\n    }\r\n}).start();\r\n```\r\n\r\n* Connecting with the active SSH Agent with Agent Forwarding\r\n\r\n```javascript\r\nvar ssh = new ssh({\r\n    host: 'localhost',\r\n    user: 'username',\r\n    agent: process.env.SSH_AUTH_SOCK,\r\n    agentForward: true\r\n})\r\n```\r\n\r\n* Capturing error output:\r\n\r\n```javascript\r\nssh.exec('this-does-not-exist', {\r\n    err: function(stderr) {\r\n        console.log(stderr); // this-does-not-exist: command not found\r\n    }\r\n}).start();\r\n```\r\n\r\n* Capturing error codes:\r\n\r\n```javascript\r\nssh.exec('exit 69', {\r\n    exit: function(code) {\r\n        console.log(code); // 69\r\n    }\r\n}).start();\r\n```\r\n\r\n* Sending data to stdin:\r\n\r\n```javascript\r\nssh.exec('cat > /path/to/remote/file', {\r\n   in: fs.readFileSync('/path/to/local/file')\r\n}).start();\r\n```\r\n\r\n* Chaining commands together:\r\n\r\n```javascript\r\nssh\r\n    .exec('echo \"Node.js\"', {\r\n        out: console.log.bind(console)\r\n    })\r\n    .exec('echo \"is\"', {\r\n        out: console.log.bind(console)\r\n    })\r\n    .exec('echo \"awesome!\"', {\r\n        out: console.log.bind(console)\r\n    })\r\n    .start();\r\n\r\n// Output:\r\n// Node.js\r\n// is\r\n// awesome!\r\n```\r\n\r\n* Get the number of commands:\r\n\r\n```javascript\r\nssh\r\n    .exec('exit 1')\r\n    .exec('exit 2')\r\n    .exec('exit 3');\r\n\r\nconsole.log(ssh.count()); // 3\r\n```\r\n\r\n* Running a command using `sudo`\r\n\r\n```javascript\r\nssh.exec('sudo echo \"Pseudo-sudo\"', {\r\n    pty: true,\r\n    out: console.log.bind(console)\r\n}).start();\r\n```\r\n\r\n* Resetting a connection and the commands\r\n\r\n```javascript\r\n// Echos out any messages the user sent in if 10 or more have been queued\r\nvar msgInterval = setInterval(function() {\r\n    if (ssh.count() > 10) {\r\n        ssh.start();\r\n    }\r\n}, 1000);\r\n\r\nsocket.on('message', function(msg) {\r\n    // If a 'reset' message is received, clear previous messages\r\n    if (msg === 'reset') {\r\n        ssh.reset(function(err) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n\r\n            ssh.exec('echo \"reset\"');\r\n        });\r\n    } else {\r\n        ssh.exec('echo \"' + msg + '\"');\r\n    }\r\n});\r\n```\r\n\r\n* Listening for additional events\r\n\r\n```javascript\r\nssh.on('error', function(err) {\r\n    console.log('Oops, something went wrong.');\r\n    console.log(err);\r\n    ssh.end();\r\n});\r\n```\r\n\r\n* Event handlers can be chained as well\r\n\r\n```javascript\r\nssh\r\n    .on('error', onSSHError)\r\n    .on('ready', onSSHReady);\r\n```\r\n\r\n----------\r\n\r\n# API\r\n\r\n### Functions\r\n\r\n* **Constructor**( [ _config_ ] )\r\n    * **config** { _Object_ }:\r\n        * **config.host** {  _String_ }: Hostname\r\n        * **config.port** { _Number_ }: Port number (default: `22`)\r\n        * **config.user** { _String_ }: Username\r\n        * **config.pass** { _String_ }: Password\r\n        * **config.timeout** { _Number_ }: Connection timeout in milliseconds (default: `10000`)\r\n        * **config.key** { _String_ }: SSH key\r\n        * **config.passphrase** { _String_ }: Passphrase\r\n        * **config.baseDir** { _String_ }: Base directory. If this is set, each command will be preceeded by `cd ${this.baseDir}`\r\n        * **config.agent** { _String_ }: Connects with the given SSH agent. If this is set, no need to specify a private key or password.\r\n        * **config.agentForward** { _Boolean_ }: Set to true to connect with agent forwarding.\r\n* **exec**( _command_, [ _options_ ] ): **Adds a command to the stack**\r\n    * **command** { _String_ }: Command to be executed\r\n    * **options** { _Object_ }:\r\n        * **options.args** { _String[]_ }: Additional command line arguments (default: `null`)\r\n        * **options.in** { _String_ }: Input to be sent to `stdin`\r\n        * **options.out** { _Function( stdout )_ }: `stdout` handler\r\n            * **stdout** { _String_ }: Output streamed through `stdout`\r\n        * **options.err** { _Function( stderr )_ }: `stderr` handler\r\n            * **stderr** { _String_ }: Output streamed through `stderr`\r\n        * **options.exit** { _Function( code, stdout, stderr )_ }: Exit handler\r\n            * **code** { _Number_ }: Exit code\r\n            * **stdout** { _String_ }: All of the standard output concatenated together\r\n            * **stderr** { _String_ }: All of the error output concatenated together\r\n        * **options.pty** { _Boolean_ }: Allocates a pseudo-tty, useful for command which require `sudo` (default: `false`)\r\n* **on**( _event_, _callback_ ): **Add a listener for the specified event** (Courtesy of [@alexjab][3])\r\n    * **event** { _String_ }: Event to listen to\r\n    * **callback** { _Function_ }: Executed on the event\r\n* **start**( [ _options_ ] ): **Starts executing the commands**\r\n    * **options** { _Object_ }:\r\n        * **options.success** { _Function()_ }: Called on successful connection\r\n        * **options.fail** { _Function( err )_ }: Called if the connection failed\r\n            * **err** { _Error_ }: Error information\r\n* **reset**( [ _callback_ ] ): **Clears the command queue and resets the current connection**\r\n    * **callback** { _Function( err )_ }: Called when the connection has been successfully reset\r\n        * **err** { _Error_ }: Error information\r\n* **end**(): **Ends the SSH session** (this is automatically called at the end of a command queue).\r\n\r\n### Properties\r\n\r\n* **host** { _String_ }: Host to connect to\r\n* **port** { _Number_ }: Port to connect through (default: `22`)\r\n* **user** { _String_ }: User name\r\n* **pass** { _String_ }: Password\r\n* **timeout** { _Number_ }: Connection timeout in milliseconds (default: `10000`)\r\n* **key** { _String_ }: SSH key\r\n* **baseDir** { _String_ }: If set, will change directory to `baseDir` before each command\r\n\r\n### Flow Control\r\n\r\nSometimes you may find yourself needing to change which commands are executed. The flow can be changed by returning `false` from an `exit` handler.\r\n\r\n**Note**: This only works if `false` is explicitly returned. \"Falsy\" values are not sufficient (since `undefined` is implicitly returned and it's \"falsy\").\r\n\r\n* Ending prematurely:\r\n\r\n```javascript\r\nssh\r\n    .exec('pwd', {\r\n        exit: function() {\r\n            return false;\r\n        }\r\n    })\r\n    .exec('echo \"Not executed\"')\r\n    .start();\r\n```\r\n\r\n* Running a new queue of commands:\r\n\r\n```javascript\r\nssh\r\n    .exec('exit', {\r\n        args: [ Math.round(Math.random()) ],\r\n        exit: function(code) {\r\n            if (code === 1) {\r\n                // Setup the new command queue\r\n                ssh.exec('echo \"new queue\"');\r\n                return false;\r\n            }\r\n        }\r\n    })\r\n    .exec('exit 0', {\r\n        exit: function() {\r\n            console.log('Previous command did not return false');\r\n        }\r\n    })\r\n    .start();\r\n```\r\n\r\n  [1]: https://github.com/mscdex/ssh2\r\n  [2]: http://nodejs.org\r\n  [3]: https://github.com/alexjab\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/MCluck90/simple-ssh.git"
  },
  "scripts": {},
  "version": "0.9.0"
}
